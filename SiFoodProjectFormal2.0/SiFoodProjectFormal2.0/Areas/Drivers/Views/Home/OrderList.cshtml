@{
    ViewData["Title"] = "外送員";

}
    <h2>訂單列表</h2>
    <div class="order-category" id="waitfordelivery" >
    <h4 @@click="toggle">待配送訂單▽&emsp;&emsp;&emsp;共有{{waitForDeliveryOrderSimple.length}}筆</h4>
        <div class="order-details" v-if="categoryOne">
            <div class="order-details1" v-for="item in waitForDeliveryOrderSimpleFormal">
                <p>
                    <div>訂單編號：{{item.orderId}}&emsp;用戶姓名：{{item.userName}}</div>
                    <div>取餐餐廳：{{item.storeName}}</div>
                    <div>取餐地址:{{item.storeAddress}}</div>
                    <div>送達地址:{{item.address}}</div>
                    <div>距離:{{item.distancetext}}&emsp;時間{{item.distancetime}}</div>
                    <button type="button" class="btn btn-success">查看詳情</button>
                </p>
            </div>
        </div>
    </div>
    <br>
<div class="order-category">
    <h4 @@click="toggle">配送中訂單▽</h4>
        <div class="order-details" v-else>
            <div class="order-details1">
                <p>
                    台北市信義區&emsp;2023/10/30&nbsp;PM12:30 <br>
                    餐廳：印度風情&emsp;1.00KM<br>
                    訂單編號：O001 &emsp;&emsp;&emsp;&emsp;<button type="button" class="btn btn-danger">配送進度</button>
                </p>
            </div>
            <div class="order-details1">
                <p>
                    台北市中山區&emsp;2023/10/30&nbsp;PM1:30 <br>
                    餐廳：大食堂 &emsp;0.08KM<br>
                    訂單編號：O002 &emsp;&emsp;&emsp;&emsp;<button type="button" class="btn btn-danger">配送進度</button>
                </p>
            </div>
        </div>
    </div>
    <br>
    <div class="order-category">
        <h4><a href="#" class="link-primary">歷史訂單</a></h4>
    </div>

@section Scripts{
   @*  <script>
        var categories = document.querySelectorAll('.order-category');
        var firstDetails = categories[0];
        var secondDetails = categories[1];
        var details = document.querySelector('.order-details:first-child');
        var details2 = document.querySelector('.order-details:last-child');
        // categories.forEach(category => {
        //     category.addEventListener('click', () => {
        //         var details = category.querySelector('.order-details');
        //         details.style.display = details.style.display === 'none' ? 'block' : 'none';
        //     });
        // });
        categories[0].addEventListener('click', () => {
            details.style.display = 'block';
            details2.style.display = 'none';
        });
        categories[1].addEventListener('click', () => {
            details.style.display = 'none';
            details2.style.display = 'block';
        });
    </script> *@
    <script src="https://unpkg.com/vue@3.2.36/dist/vue.global.js" ></script>
    @* <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN9KFcDFxucoV9IglJyqQSd_d1GLWHiYI" async defer></script> *@
    <script>
   // 司機現在位置 setDriverMap.current
        var baseAddress = "https://localhost:7042";
        var OrderList = Vue.createApp({
            data: function () {
                return {
                    categoryOne:true,
                    waitForDeliveryOrderSimple: [],
                    location: [],
                    waitForDeliveryOrderSimpleFormal:[],
                }
            },
            mounted: async function () {
               await this.findWaitForDeliveryOrderSimple();
                this.getDistance();
            },
            computed: {

            },
            methods: {
                toggle() {
                    this.categoryOne = !this.categoryOne;
                },
                async findWaitForDeliveryOrderSimple() {
                    await fetch(`${baseAddress}/api/DeliveryOrderapi/WaitForDeliveryOrderSimple`, { method: "GET" })
                        .then(response => response.json())
                        .then(data => {
                            this.waitForDeliveryOrderSimple = data;
                            this.location = data.map(o => ({ lat: o.latitude, lng: o.longitude }));
                            console.log(this.location);
                        })
                },
                getDistance() {
                    var service = new google.maps.DistanceMatrixService();

                    var currentArray = [setDriverMap.current]
                    service.getDistanceMatrix(
                        {
                            origins: currentArray,
                            destinations: this.location,
                            travelMode: 'DRIVING',
                            avoidHighways: true,
                            avoidTolls: true
                        }, this.getDistanceResult);
                    // console.log(this.location);
                    // console.log(currentArray);
                },
                getDistanceResult(response, status) {
                    if (status !== google.maps.DistanceMatrixStatus.OK) {
                        window.alert('Error was' + status);
                    } else {
                        console.log(response);
                        for (let i = 0; i < this.waitForDeliveryOrderSimple.length; i++) {
                            this.waitForDeliveryOrderSimple[i].distance = response.rows[0].elements[i].distance.value;
                            this.waitForDeliveryOrderSimple[i].distancetext = response.rows[0].elements[i].distance.text;
                            this.waitForDeliveryOrderSimple[i].distancetime = response.rows[0].elements[i].duration.text;
                        }
                        console.log(this.waitForDeliveryOrderSimple);
                        this.waitForDeliveryOrderSimpleFormal = this.waitForDeliveryOrderSimple.sort((a, b) => a.distance - b.distance);
                    }
                }

            }





    }).mount("#waitfordelivery")
    </script>

}