@{
    ViewData["Title"] = "外送員首頁";
}@{
    Layout = "~/Areas/Drivers/Views/Shared/_Layout.cshtml";
}

<div class="box2 border border-success rounded" id="chooseOrder">
    <div>
        <h4 font-weight><span class="badge bg-info text-dark">訂單編號:{{waitForDeliveryOrder.orderId}}</span></h4>
                <div>
                    預估完成時間：{{expectedtime}}分鐘<br>
                    取餐餐廳：{{waitForDeliveryOrder.storeName}}<br>
                    取餐地址：{{waitForDeliveryOrder.storeAddress}}<br>
                    配送地址：{{waitForDeliveryOrder.address}}<br>
                    總路程距離：{{expecteddistance}}公里<br>
                    顧客姓名：{{waitForDeliveryOrder.userName}}<br>
                </div>
                <hr />
                取餐明細:<br>
                <div v-for="item in waitForDeliveryOrder.orderDetails">
                    {{item.productName}}&emsp;數量:{{item.quantity}}
                </div>
                <template v-if="waitForDeliveryOrder.statusId==4||isAccept==true">
                    <div class="text-center">
                <button type="button" class="btn btn-primary btn-group-lg" @@click="direction">導航</button>&emsp;&emsp;&emsp;&emsp;<button type="button" class="btn btn-danger btn-group-lg" data-bs-toggle="modal" data-bs-target="finishModal" @@click="finishOrder">送達完成</button>&emsp;&emsp;&emsp;&emsp;<button type="button" class="btn btn-primary btn-group-lg" @@click="directToPage">回首頁</button>
                    </div>
                </template>
                <template v-else>
                    <div class="text-center">
                <button type="button" class="btn btn-primary btn-group-lg" @@click="accept">接受</button>&emsp;&emsp;&emsp;&emsp;<a href="/Drivers/Home/OrderList"><button type="button" class="btn btn-danger btn-group-lg" @@click="directToPage">取消</button></a>
                    </div>
                </template>
            </div>
    <!--Modal-->
    <div class="modal" tabindex="-1" id="finishModal" aria-labelledby="finishModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-body">
                    <p>感謝!已送達完成</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="modal" @@click="directToPage">回首頁</button>
                </div>
            </div>
        </div>
    </div>
    <!--Modal-->
</div>

<script src="https://unpkg.com/vue@3.2.36/dist/vue.global.js"></script>
<script>
    // var baseAddress = "https://localhost:7042";
    var chooseOrder = Vue.createApp({
        data: function () {
            return {
                waitForDeliveryOrder: {},
                toStorelocation: "",
                arrivingLocation:"",
                expectedtime:null,
                isAccept:false,
            }
        },
        mounted: async function () {
            await this.getWaitForDeliveryOrder();
            await this.AllGetDistanceToStore();
        },
        methods: {
            async getWaitForDeliveryOrder() {
                var orderId = window.location.pathname.slice("26");
                await fetch(`/api/DeliveryOrderapi/WaitForDeliveryOrderDetails/${orderId}`, { method: "GET" })
                    .then(response => response.json())
                    .then(data => {
                        this.waitForDeliveryOrder = data[0];
                        this.toStorelocation = data[0].storeAddress;
                        this.arrivingLocation = data[0].address;
                    }).catch(error => alert("此訂單已運送完成!"));
            },
            AllGetDistanceToStore() {
                var service = new google.maps.DistanceMatrixService();
                var oridinArray = [setDriverMap.current, this.toStorelocation];
                var destinationArray = [this.toStorelocation, this.arrivingLocation];
                console.log(oridinArray);
                console.log(destinationArray);
                service.getDistanceMatrix(
                    {
                        origins: oridinArray,//陣列
                        destinations: destinationArray,//陣列
                        travelMode: 'DRIVING',
                        avoidHighways: true,
                        avoidTolls: true
                    }, this.AllGetDistanceToStoreResult);
            },
            AllGetDistanceToStoreResult(response, status) {
                if (status !== google.maps.DistanceMatrixStatus.OK) {
                    alert("發生錯誤，請洽系統管理員");
                } else {
                    console.log(response);
                    this.waitForDeliveryOrder.distancetexttostore = response.rows[0].elements[0].distance.text;
                    this.waitForDeliveryOrder.distancetimetostore = response.rows[0].elements[0].duration.text;
                    this.waitForDeliveryOrder.distancetext = response.rows[1].elements[1].distance.text;
                    this.waitForDeliveryOrder.distancetime = response.rows[1].elements[1].duration.text;
                }
                this.expectedFinishTimeAndDistance();
            },
            expectedFinishTimeAndDistance() {
                this.expectedtime = Number(this.waitForDeliveryOrder.distancetimetostore.slice(0, -3)) + Number(this.waitForDeliveryOrder.distancetime.slice(0, -3));
                this.expecteddistance = Number(this.waitForDeliveryOrder.distancetext.slice(0, -3)) + Number(this.waitForDeliveryOrder.distancetexttostore.slice(0, -3));
            },
            async accept() {//狀態要變
                let directionsService = new google.maps.DirectionsService();
                var orderId = window.location.pathname.slice("26");
                directionsService.route(
                    {
                        origin: setDriverMap.current,//字串
                        destination: this.arrivingLocation.toString(),//字串
                        travelMode: 'DRIVING',
                        waypoints: [
                            {
                                location: this.toStorelocation.toString(),//字串
                                stopover: true
                            }],
                        avoidHighways: true,
                    }, this.getRoute);

                await fetch(`/api/DeliveryOrderapi/UpdateOrderStatus/${orderId}`, {
                    method: "PUT",
                }).then(response => response).catch(error => alert(error));
            },
            getRoute(response, status) {
                if (status == 'OK') {
                    let directionsDisplay = new google.maps.DirectionsRenderer({
                        map: setDriverMap.map,
                        directions: response,
                    });
                    this.isAccept = true;
                };
            },
            direction() {
                let directionsService = new google.maps.DirectionsService();
                directionsService.route(
                    {
                        origin: setDriverMap.current,//字串
                        destination: this.arrivingLocation.toString(),//字串
                        travelMode: 'DRIVING',
                        waypoints: [
                            {
                                location: this.toStorelocation.toString(),//字串
                                stopover: true
                            }],
                        avoidHighways: true,
                    }, this.getRoute);
            },
            directToPage(){
                window.location.href = '../OrderList';
            },
            async finishOrder() {
                var orderId = window.location.pathname.slice("26");
                await fetch(`/api/DeliveryOrderapi/FinishOrder/${orderId}`, {
                    method: "PUT",
                }).then(response => response).catch(error => alert(error));
                $("#finishModal").modal("show");
            },
        }
    }).mount("#chooseOrder")
</script>

